import math

def single_payment_calulator():
    print("Enter your known values and leave the field you would like to solve for blank\n")
    FV = input("Enter your Future Value: ")
    PV = input("Enter your Present Value: ")
    num_of_periods = input("Enter the Number of Compounding Periods: ")
    interest_rate = input("Enter the Interest Rate per Compounding Period as a decimal: ")
    
    input_list = [FV, PV, num_of_periods, interest_rate]
    for i in range(len(input_list)):
        input_list[i] = input_list[i].strip()==""
   
    if sum(input_list) >= 2:
        print("Two or more fields were left blank. Please leave a single field that you would like to solve for blank.")
        return single_payment_calulator()
    
    elif sum(input_list) == 0:
        print("Zero fields were left blank. Please leave a single field that you would like to solve for blank.")
        return single_payment_calulator()
    
    elif FV.strip() == "":
        PV = float(PV)
        interest_rate = float(interest_rate)
        num_of_periods = float(num_of_periods)
        future_val = PV*(1 + interest_rate)**num_of_periods
        #print("The Future Value is", future_val)
        return future_val
    
    elif PV.strip() == "":
        FV = float(FV)
        interest_rate = float(interest_rate)
        num_of_periods = float(num_of_periods)
        present_val = FV/(1 + interest_rate)**num_of_periods
        #print("The Present Value is", present_val)
        return present_val
    
    elif num_of_periods.strip() == "":
        FV = float(FV)
        PV = float(PV)
        interest_rate = float(interest_rate)
        periods = math.log(FV/PV) / math.log(1+interest_rate)
        #print("The Number of Compounding Periods is", periods)
        return periods
    
    elif interest_rate.strip() == "":
        FV = float(FV)
        PV = float(PV)
        num_of_periods = float(num_of_periods)
        rate = (FV/PV)**(1/num_of_periods) - 1
        #print("The Interest Rate per Compounding Periods is", rate)
        return rate
        
single_payment_calulator()
